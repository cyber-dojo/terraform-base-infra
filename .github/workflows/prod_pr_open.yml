name: 'prod-pr-open'

on:
  pull_request:
    branches: [ prod ]

concurrency:
  group: ${{ github.workflow }} 

env:
  KOSLI_ORG: cyber-dojo-trails
  KOSLI_FLOW: terraform-base-infra-prs
  KOSLI_TRAIL: PR-${{ github.event.pull_request.number }}

jobs:
  begin-trail:
    runs-on: ubuntu-latest
    permissions:
      id-token: write
      contents: write
    strategy:
      fail-fast: false
      matrix:
        kosli_env: [kosli-prod, kosli-staging]
        include:
          - kosli_host: ${{ vars.KOSLI_HOST }} # https://app.kosli.com
            kosli_api_token: "KOSLI_API_TOKEN_TRAILS"
            kosli_cli_version: ${{ vars.KOSLI_CLI_VERSION }}
            kosli_dry_run: ${{ vars.KOSLI_DRY_RUN }}
            kosli_env: kosli-prod
          - kosli_host: ${{ vars.KOSLI_HOST_STAGING }} # https://staging.app.kosli.com
            kosli_api_token: "KOSLI_API_TOKEN_TRAILS_STAGING"
            kosli_env: kosli-staging
            kosli_cli_version: ${{ vars.KOSLI_CLI_VERSION }}
            kosli_dry_run: ${{ vars.KOSLI_DRY_RUN }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Kosli cli
        uses: kosli-dev/setup-cli-action@v2
        with:
          version: ${{ matrix.kosli_cli_version }}

      - name: Create Kosli flow for terraform-base-infra PRs
        run:
          kosli create flow ${{ env.KOSLI_FLOW }} 
            --template-file kosli-trail-template.yml 
            --description "Kosli flow to track terraform PRs for base infra"
            --host ${{ matrix.kosli_host }}
            --api-token ${{ secrets[matrix.kosli_api_token] }}
            --dry-run ${{ matrix.kosli_dry_run }}

      - name: Create Kosli trail for terraform-base-infra PRs
        run:
          kosli begin trail ${{ env.KOSLI_TRAIL }}
            --flow ${{ env.KOSLI_FLOW }} 
            --template-file kosli-trail-template.yml
            --host ${{ matrix.kosli_host }}
            --api-token ${{ secrets[matrix.kosli_api_token] }}
            --dry-run ${{ matrix.kosli_dry_run }}

      - name: Configure AWS credentials for terraform validation
        id: configure-aws-creds
        uses: aws-actions/configure-aws-credentials@v4.0.1
        with:
          role-to-assume: arn:aws:iam::274425519734:role/gh_base_infra
          aws-region: eu-central-1
          role-duration-seconds: 900
          role-session-name: ${{ github.event.repository.name }}
          mask-aws-account-id: 'no'

      - name: Setup terraform
        uses: hashicorp/setup-terraform@v2.0.3
        with:
          terraform_version: v1.4.5
          terraform_wrapper: false

      - name: Terraform init
        run: terraform init -backend=false

      - name: Terraform validate
        run: |
          terraform validate -json > validation_results.json
          echo "KOSLI_TF_VALIDATION_COMLIANT=$(jq -r '.valid' ./validation_results.json)" >> ${GITHUB_ENV}

      - name: Attest terraform validation results to Kosli trail
        run:
          kosli attest generic
            --name tf-validation
            --flow ${{ env.KOSLI_FLOW }}
            --trail ${{ env.KOSLI_TRAIL }}
            --evidence-paths ./validation_results.json
            --compliant ${{ env.KOSLI_TF_VALIDATION_COMLIANT }}
            --host ${{ matrix.kosli_host }}
            --api-token ${{ secrets[matrix.kosli_api_token] }}
            --dry-run ${{ matrix.kosli_dry_run }}

  plan:
    permissions:
      id-token: write
      contents: write
    uses: fivexl/gh-workflow-tf-plan-apply/.github/workflows/base.yml@v0.0.15
    with:
      aws_region: eu-central-1
      aws_default_region: eu-central-1
      aws_role_arn: arn:aws:iam::274425519734:role/gh_base_infra
      aws_role_duration: 900
      working_directory: ./
      tf_version: v1.4.5
      tf_dont_fail_if_plan_not_empty: true
      tf_upload_artifacts: 'true'
      tf_upload_artifact_path: "./plan.tfplan"

  trail-attest-tf-plan:
    needs: [ begin-trail, plan ]
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        kosli_env: [kosli-prod, kosli-staging]
        include:
          - kosli_host: ${{ vars.KOSLI_HOST }} # https://app.kosli.com
            kosli_cli_version: ${{ vars.KOSLI_CLI_VERSION }}
            kosli_dry_run: ${{ vars.KOSLI_DRY_RUN }}
            kosli_api_token: "KOSLI_API_TOKEN_TRAILS"
            kosli_env: kosli-prod
          - kosli_host: ${{ vars.KOSLI_HOST_STAGING }} # https://staging.app.kosli.com
            kosli_cli_version: ${{ vars.KOSLI_CLI_VERSION }}
            kosli_dry_run: ${{ vars.KOSLI_DRY_RUN }}
            kosli_api_token: "KOSLI_API_TOKEN_TRAILS_STAGING"
            kosli_env: kosli-staging
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup kosli cli
        uses: kosli-dev/setup-cli-action@v2
        with:
          version: ${{ matrix.kosli_cli_version }}

      - name: Download a single artifact
        uses: actions/download-artifact@v4.1.1
        with:
          name: tf_artifacts
      
      - name: Attest tf plan to Kosli trail
        run:
          kosli attest generic
            --name tf-plan
            --flow ${{ env.KOSLI_FLOW }}
            --trail ${{ env.KOSLI_TRAIL }}
            --evidence-paths ./plan.tfplan
            --host ${{ matrix.kosli_host }}
            --api-token ${{ secrets[matrix.kosli_api_token] }}
            --dry-run ${{ matrix.kosli_dry_run }}

  cleanup-workflow-artifacts:
    needs: [ trail-attest-tf-plan ]
    runs-on: ubuntu-latest
    permissions:
      actions: write
      contents: read
    steps:
      - name: Delete tf plan artifact
        run: |
          # Get the list of artifacts
          artifact_id=$(curl -s -L \
            -H "Accept: application/vnd.github+json" \
            -H "Authorization: Bearer ${{ secrets.GITHUB_TOKEN }}" \
            -H "X-GitHub-Api-Version: 2022-11-28" \
            https://api.github.com/repos/${{ github.repository}}/actions/runs/${{ github.run_id }}/artifacts | jq -r '.artifacts[] | select(.name == "tf_artifacts").id')

          # Delete each artifact
          curl -L \
            -X DELETE \
            -H "Accept: application/vnd.github+json" \
            -H "Authorization: Bearer ${{ secrets.GITHUB_TOKEN }}" \
            -H "X-GitHub-Api-Version: 2022-11-28" \
            https://api.github.com/repos/${{ github.repository}}/actions/artifacts/${artifact_id}
